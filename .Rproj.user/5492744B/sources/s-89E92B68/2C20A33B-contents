---
title: "EDA"
author: "Abdullah"
date: "May 8, 2019"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## ===== ===== ===== ===== ===== Capstone Project ===== ===== ===== ===== =====

```{r}
install.packages("e1071")
install.packages("ggplot2")
##install.packages("plyr")
```

```{r}
##library("plyr")
library("ggplot2")
library("e1071")
```

In this part we shall mostly look to clean our data, which includes: address missing/duplicate values, look for outliers, correct data types , fixing categorical variables, Distribution of variables, Low variance filter.

#0.0
#Importing data 
```{r}
raw_data = read.csv2(file='C:\\Users\\Abdullah\\Desktop\\housePrices\\train.csv', header = T, sep = ",", dec = ".",stringsAsFactors = FALSE)
modified_data = raw_data ## To ensure we do not touch original data, we replicate into another df and use that as modified version
str(raw_data)
head(raw_data)
```
As we can see, we have 81 variables in our data set; 1 ID and 1 salesPrice, 43 categorical and 36 quantitative. Data entries are either int or char data type.

# 1 - Inital Analysis

# 1.1 - Univarient Analysis

# 1.1.1 Looking at our Target variable: Sales Price

```{r}
summary(raw_data$SalePrice)
typeof(raw_data$SalePrice)

myhist <- hist(raw_data$SalePrice)


multiplier <- myhist$counts / myhist$density
mydensity <- density(raw_data$SalePrice)
mydensity$y <- mydensity$y * multiplier[1]

plot(myhist, xlab = "Sales Price", main = "Histogram of Sales")
lines(mydensity)

```
We can see that the average sales price of a house is $181k, the distribution of which is skewed to the right. As we can see from the histogram, the right tail is longer and the mass of the concentration of data is to the left of the graph, suggesting a positive skew value. The peak also looks very sharp, assuming a high kurtosis value.

We can measure the Skew
```{r}
skew = skewness(raw_data$SalePrice)
kurt = kurtosis(raw_data$SalePrice)

cat("Skewness: ", skew)
cat("\nKurtosis: ", kurt)
```

```{r}
boxplot(raw_data$SalePrice)
```
We can see that there are many outlier in the SalePrice. In fact, we can measure knowing that outliers are classified as values over 3rd Quartile + 1.5*(IQR)

```{r}
count = 0;
x = 1;
while (x < 1461) {
  if (raw_data$SalePrice[x] > 340000){
    count = count + 1
  }
  x = x + 1 
}
cat("Number of Sales that lie as outliers are: ", count)
```
Now that we've seen that there are 61 outliers in the Sale Price, lets look into them.

```{r}
outlier_sales <- subset(raw_data, raw_data$SalePrice > 340000)
outlier_sales
```
As we can see, there are missing values for many of the entries. Perhaps it is better that we look to address missing values in our other 80 variables.

# 1.1.2 Addressing Nas, missing values in our House Attributes

```{r}
# Counting number of nulls in each col
x = 1
cat("---NULL COUNT---\n")
while (x<81){
  if(sum(is.na((raw_data[x]))>0)){
    cat("Number of nulls in ",(colnames(raw_data[x])), ": ")
    cat(sum(is.na(raw_data[x])), "\n")
  }
  x = x + 1 
}
```
There are 19 variables with NA values. It is important to note that this might mean that the observation is missing or perhaps a NA means somthing itself. We must consult the data dictionary.

LotFrontage has 259 NA values. This is integer value repersenting  Linear feet of street connected to property. Looking into the dataset, we see that the other observations have a value anywhere from 21-313. We can safetly assume that these 259 entries repersent a house that has 0 linear feet of street being connected to the property. Of course it could be a case of missin value, but it is possible that the homes do not have the property connecting to a steet, we take this assumptions and instead change the NAs to 0. As such, We will not be removing such observations

```{r}
v = 1
while (v<1461){
  if (is.na(modified_data$LotFrontage[v])){
    modified_data$LotFrontage[v] = 0
  }
  v = v + 1
}
```

Alley has 1369 NAs, this high number suggests that the NAs must mean somthing rather than missing value. The dictionary shows us the NA repersents no alley Access. Rather than Na, lets change that to 'None' a bit more repersentative. 

```{r}
v = 1
while (v<1461){
  if (is.na(modified_data$Alley[v])){
    modified_data$Alley[v] = "None"
  }
  v = v + 1
}
```

MasVnrType and MasVnrArea both have 8 missing values. This is very suspeious. Could it be that they are of the same observations and due to another house feature? Let us check. Maybe our data dictionary can help us with this. 

```{r}
MasVnr <- subset(raw_data, is.na(raw_data$MasVnrType))
MasVnr$Area <- subset(raw_data, is.na(raw_data$MasVnrArea))
MasVnr
```

These both variables are Na in the same observation. What is weird is that MasVnrType has a None category, so that means that it isn't a case that there was no masonry veneer, rather I would say that the Masonry data was not collected for these 8 observations. This would tell me that it might be good to remove the observations

```{r}
modified_data <- subset(modified_data, !is.na(raw_data$MasVnrType)) # we only do it for when one attribute isnt na, because the other overlaps.
```

Next lets look at BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2. All these have 37-38 missing values. Lets see if they are overlapping observations again, and see if we can figure out a pattern.

```{r}
Bsmt <- subset(raw_data, is.na(raw_data$BsmtExposure))
Bsmt
```
Here we can see that they all overlap and there is a pattern here. They are all basement, perhaps there is somthing odd about the basement. Looking in the data dictionary confirms our suspicions, NA repersents No basements for all of there variables. These are not missing values, and NA is a very meaningful entry. I don't like the use of NA, I would rather use a more descriptive categorical name: NoB

```{r}
v = 1
while (v<1453){
  if (is.na(modified_data$BsmtQual[v])){
    modified_data$BsmtQual[v] = "NoB"
  }
  if (is.na(modified_data$BsmtCond[v])){
    modified_data$BsmtCond[v] = "NoB"
  }
  if (is.na(modified_data$BsmtExposure[v])){
    modified_data$BsmtExposure[v] = "NoB"
  }
  if (is.na(modified_data$BsmtFinType1[v])){
    modified_data$BsmtFinType1[v] = "NoB"
  }
  if (is.na(modified_data$BsmtFinType2[v])){
    modified_data$BsmtFinType2[v] = "NoB"
  }
  v = v + 1
}
Bsmt1 <- subset(modified_data, modified_data$BsmtExposure == "NoB")
Bsmt1
Bsmt2 <- subset(modified_data, modified_data$BsmtFinType2 == "NoB")
Bsmt2
```
It's important to note that observation 949 has a basement that is unfinished and the Exposure is set to NA. This is a potential missing value, only because we know that the other categorical variables label this observation as UNFINSHED rather than NO BASEMENT. The exposture could have been set at No exposure, but rather was set to a level repersenting no basement. I think it's safe to remove this data observation.

Also observation 333 has a signular basement with FinType2 as NA. FinType1 does have a value, however, and after looking through other observations, this stikes as very odd. FinType repersents the finishing of the basement, FinType1 repersents the first layer, and FinType2 repersents any additional layers (if there are any), however in the event there is one layer, other entries would have FinType2 as UNF or No Basement. I think it is safe to eliminate this observation.

```{r}
modified_data <- modified_data[-c(949),]
modified_data <- modified_data[-c(333),]
```
Poof! The two records are gone.

For the misisng electrical data, we will be removing it, because NA has no meaning behind it and there needs to be an option for it.
```{r}
modified_data <- subset(modified_data, !is.na(modified_data$Electrical))
```
Poof! It's gone!

For FireplaceQu, I looked ahead at the data dictionary, and it clearly states all NAs means no Fireplace, so we can attribute this to a better categorical variable: NoF
```{r}
v = 1
while (v<1450){
  if (is.na(modified_data$FireplaceQu[v])){
    modified_data$FireplaceQu[v] = "NoF"
  }
  v = v + 1
}
```

And now again we have 5 variables that describe the same part of the house, the garage (GarageType, GarageYrBlt, GarageFinish, GarageQual, GarageCond), and they have equal amounts of NA (81). And to no suprise, NA for each of those variables means No garage. We'll chnage this to NoG instead.

```{r}
v = 1
while (v<1450){
  if (is.na(modified_data$GarageType[v])){
    modified_data$GarageType[v] = "NoG"
  }
  if (is.na(modified_data$GarageYrBlt[v])){
    modified_data$GarageYrBlt[v] = "NoG"
  }
  if (is.na(modified_data$GarageFinish[v])){
    modified_data$GarageFinish[v] = "NoG"
  }
  if (is.na(modified_data$GarageQual[v])){
    modified_data$GarageQual[v] = "NoG"
  }
  if (is.na(modified_data$GarageCond[v])){
    modified_data$GarageCond[v] = "NoG"
  }
  v = v + 1
}

```

I found it that the next three attributes had a lot of NA entires. So I looked into the data dictionary, they all repersent the missing item for the attribute. They are not missing values, so will not be excluded, but given better names. NA for PoolQc will be chnaged to NoP, NA for Fence will be NoF, and NA for MiscFeature will become NoM.

```{r}
v = 1
while (v<1450){
  if (is.na(modified_data$PoolQC[v])){
    modified_data$PoolQC[v] = "NoP"
  }
  if (is.na(modified_data$Fence[v])){
    modified_data$Fence[v] = "NoF"
  }
  if (is.na(modified_data$MiscFeature[v])){
    modified_data$MiscFeature[v] = "NoM"
  }
  v = v + 1
}
```
We should be done will addressing missing values, lets check!

```{r}
x = 1
cat("---NULL COUNT---\n")
while (x<81){
  if(sum(is.na((modified_data[x]))>0)){
    cat("Number of nulls in ",(colnames(modified_data[x])), ": ")
    cat(sum(is.na(modified_data[x])), "\n")
  }
  x = x + 1 
}

```
# 1.1.3 Fixing Data types

```{r}
modified_data$MSSubClass <- as.character(modified_data$MSSubClass)
```
 
# 1.1.4 Distribution of variables as.data.frame(table(modified_data[,6]))

```{r}
#Graphing the distribution of each factor in each categorical attribute
a = 2
colname <- colnames(modified_data)
while (a < 81){
  if (is.character(modified_data[,a])){
    print(ggplot(data = modified_data, aes(x=modified_data[,a], y=modified_data$SalePrice)) + geom_boxplot(aes(fill = factor(modified_data[,a]) )) + stat_summary())
  }
  else{
    cat("Attribute #", a," is a quantitative variable. (", colname[a], ")\n")
  }
  a = a + 1
}
```



# 1.1.5 Reducing the levels on for Categorical attributes.

This will be a strainious process, but I will be going thru each categorical variable.
```{r}

```


# 1.1.6 Low variance Filter

We will be working on checking the vairance of each variable. We want high variance.

```{r}
```


```{r}
# Sale Price vs. Categorical/Oridinal variables 

a = 2
colname <- colnames(modified_data)
while (a < 81){
  if (is.character(modified_data[,a])){
    print(ggplot(data = modified_data, aes(x=modified_data[,a], y=modified_data$SalePrice)) + geom_boxplot(aes(fill = factor(modified_data[,a]) )))
  }
  else{
    cat("Following attribute is a quantitative variable: ", colname[a], "\n")
  }
  a = a + 1
}

```